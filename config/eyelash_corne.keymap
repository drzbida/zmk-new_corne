#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        NUMSYM: NUMSYM {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMSYM";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 2>;
        };

        WINALT: WINALT {
            compatible = "zmk,behavior-tap-dance";
            label = "WINALT";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LEFT_ALT>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <23 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R      &kp T                             &mmv MOVE_UP                     &kp Y      &kp U          &kp I      &kp O    &none     &none
&td0       &kp A  &kp S  &kp D  &kp F      &kp G             &mmv MOVE_LEFT  &mkp MB1        &mmv MOVE_RIGHT  &kp H      &kp J          &kp K      &kp L    &kp P     &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C  &kp V      &kp B    &none                    &mmv MOVE_DOWN                   &kp N      &kp M          &kp COMMA  &kp DOT  &kp FSLH  &none
                         &mo 1  &kp SPACE  &WINALT                                                            &kp ENTER  &kp BACKSPACE  &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        raise_layer {
            bindings = <
&kp ESC  &trans  &mt AMPERSAND N7          &mt ASTERISK N8       &mt LEFT_PARENTHESIS N9  &none                                       &trans          &trans    &trans    &trans  &trans     &trans  &trans
&trans   &trans  &mt DOLLAR NUMBER_4       &mt PERCENT N5        &mt CARET NUMBER_6       &trans                              &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp N3  &trans
&trans   &trans  &mt EXCLAMATION NUMBER_1  &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3        &mt RIGHT_PARENTHESIS N0  &trans            &trans          &trans    &trans    &trans  &trans     &trans  &trans
                                           &trans                &trans                   &trans                                                      &trans    &trans    &trans
            >;

            label = "NUMBER";
        };

        layer_2 {
            bindings = <
&trans  &trans  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RPAR)                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans        &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                              &trans         &trans         &trans                                          &trans  &trans  &trans
            >;
        };
    };
};
